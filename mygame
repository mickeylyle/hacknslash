#!/usr/bin/python

import pygame
import sys
from hackmap import hackmap
from hackplayer import hackplayer
from hackdebug import hackdebug

class HackNSlash:

    def __init__(self):
        self.SCREEN_WIDTH = 1024
        self.SCREEN_HEIGHT = 768
        self.PIXEL_HEIGHT = 240
        self.PIXEL_RATIO = 1
        self.ISCREEN_WIDTH = 320
        self.ISCREEN_HEIGHT = 240
        self.SCREEN_X_OFFSET = 0
        self.SCREEN_Y_OFFSET = 0
        self.camera_x_position = 0
        self.camera_y_position = 0
        self.debug = hackdebug(self)
        self.quit = False
        self.screen, self.iscreen = self.setup_screen(self.SCREEN_WIDTH, self.SCREEN_HEIGHT)
        self.clock = pygame.time.Clock()
        self.main_map = hackmap("main")
        self.map_surface = self.main_map.draw()
        self.player = hackplayer(self)

    def setup_screen(self, width, height):
        self.SCREEN_WIDTH = width
        self.SCREEN_HEIGHT = height
        self.PIXEL_RATIO = height / self.PIXEL_HEIGHT
        self.ISCREEN_HEIGHT = self.PIXEL_HEIGHT + ((height % self.PIXEL_HEIGHT) / self.PIXEL_RATIO)
        self.ISCREEN_WIDTH = width / self.PIXEL_RATIO
        self.SCREEN_X_OFFSET = (self.SCREEN_WIDTH - (self.ISCREEN_WIDTH * self.PIXEL_RATIO)) / 2
        self.SCREEN_Y_OFFSET = (self.SCREEN_HEIGHT - (self.ISCREEN_HEIGHT * self.PIXEL_RATIO)) / 2
        return pygame.display.set_mode([width, height], pygame.SRCALPHA, 32), \
            pygame.Surface([self.ISCREEN_WIDTH, self.ISCREEN_HEIGHT], pygame.SRCALPHA, 32)

    def draw_scene(self):
        self.iscreen.fill((0,0,0))
        self.iscreen.blit(self.map_surface, [(self.camera_x_position + self.main_map.buffer) * -1, (self.camera_y_position + self.main_map.buffer) * -1])
        self.iscreen.blit(self.player.image, [self.ISCREEN_WIDTH / 2, self.ISCREEN_HEIGHT / 2])

    def flip_display(self, iscreen, screen):
        screen.blit(pygame.transform.scale(iscreen, \
            [self.ISCREEN_WIDTH * self.PIXEL_RATIO, self.ISCREEN_HEIGHT * self.PIXEL_RATIO]), \
            [self.SCREEN_X_OFFSET, self.SCREEN_Y_OFFSET])
        if self.debug.render: screen.blit(self.debug.render_it(), [0, 0])
        pygame.display.flip()

    def handle_input(self, buttons):
        def move_up(): self.camera_y_position -= 1
        def move_down(): self.camera_y_position += 1
        def move_left(): self.camera_x_position -= 1
        def move_right(): self.camera_x_position += 1
        if buttons[pygame.K_q]: pygame.event.post(pygame.event.Event(pygame.QUIT))
        if buttons[pygame.K_UP]: move_up()
        if buttons[pygame.K_DOWN]: move_down()
        if buttons[pygame.K_LEFT]: move_left()
        if buttons[pygame.K_RIGHT]: move_right()
        if buttons[pygame.K_d]: self.debug.render = not self.debug.render


    def loop(self):
        while not self.quit:
            time_passed = self.clock.tick(100)

            for event in pygame.event.get():
                if event.type == pygame.QUIT: self.quit = True
            self.handle_input(pygame.key.get_pressed())
            self.draw_scene()
            self.flip_display(self.iscreen, self.screen)
            coords = self.player.get_tile_position()
            self.debug.tile_x = str(coords[0])
            self.debug.tile_y = str(coords[1])
        pygame.quit()
        sys.exit()

def main():
    pygame.init()
    game_object = HackNSlash()
    game_object.loop()

main()
